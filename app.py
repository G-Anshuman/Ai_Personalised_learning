# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AZ3XqA8EWfnJbE0sBic7TaHAJS073kmZ
"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# import pandas as pd
# import pickle
# 
# st.title("üìö Student Diagnostic Prototype")
# 
# try:
#     with open("Drona_Ai/best_rf_model.pkl", "rb") as f:
#         model = pickle.load(f)
# 
#     with open("Drona_Ai/feature_encoders.pkl", "rb") as f:
#         feature_encoders = pickle.load(f)
# 
#     with open("Drona_Ai/target_encoder.pkl", "rb") as f:
#         target_encoder = pickle.load(f)
# 
#     st.success("‚úÖ Model and encoders loaded successfully!")
# 
# except Exception as e:
#     st.error(f"‚ö†Ô∏è Failed to load model files: {e}")
#     st.stop()
# 
# # -----------------------------
# # Streamlit UI
# # -----------------------------
# st.title("üìö Student Diagnostic Prototype")
# st.write("This app uses your trained ML model to make predictions.")
# 
# # Topic choices (must match training encoders)
# topic_choices = list(feature_encoders["Topic"].classes_)
# topic = st.selectbox("Select Topic", topic_choices)
# 
# score = st.number_input("Score", min_value=0, max_value=100, value=50)
# time_seconds = st.number_input("Time Taken (seconds)", min_value=1, value=60)
# feedback = st.text_input("Feedback", "Good attempt")
# attempts = st.number_input("Attempts", min_value=1, value=1)
# 
# # -----------------------------
# # Predict button
# # -----------------------------
# if st.button("Predict"):
#     try:
#         row = {
#             "Topic": topic,
#             "Score": score,
#             "Time Taken (seconds)": time_seconds,
#             "Feedback": feedback,
#             "Attempts": attempts
#         }
# 
#         df_infer = pd.DataFrame([row])
# 
#         # Encode features using saved encoders
#         for col, le in feature_encoders.items():
#             if col in df_infer.columns:
#                 if df_infer[col].iloc[0] in le.classes_:
#                     df_infer[col] = le.transform(df_infer[col])
#                 else:
#                     st.error(f"‚ö†Ô∏è Unknown label '{df_infer[col].iloc[0]}' in column '{col}'")
#                     st.stop()
# 
#         # Prediction
#         pred = model.predict(df_infer)
#         pred_label = target_encoder.inverse_transform(pred)
# 
#         st.success(f"‚úÖ Predicted Next Step: **{pred_label[0]}**")
# 
#     except Exception as e:
#         st.error(f"Error during prediction: {e}")
#

